# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_pb2 as rpc__pb2


class TrafficgenStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isTrafficgenRunning = channel.unary_unary(
                '/trafficgen.Trafficgen/isTrafficgenRunning',
                request_serializer=rpc__pb2.IsTrafficgenRunningParams.SerializeToString,
                response_deserializer=rpc__pb2.TrafficgenRunning.FromString,
                )
        self.isResultAvailable = channel.unary_unary(
                '/trafficgen.Trafficgen/isResultAvailable',
                request_serializer=rpc__pb2.IsResultAvailableParams.SerializeToString,
                response_deserializer=rpc__pb2.ResultAvailable.FromString,
                )
        self.getResult = channel.unary_unary(
                '/trafficgen.Trafficgen/getResult',
                request_serializer=rpc__pb2.GetResultParams.SerializeToString,
                response_deserializer=rpc__pb2.Result.FromString,
                )
        self.startTrafficgen = channel.unary_unary(
                '/trafficgen.Trafficgen/startTrafficgen',
                request_serializer=rpc__pb2.BinarySearchParams.SerializeToString,
                response_deserializer=rpc__pb2.Success.FromString,
                )
        self.stopTrafficgen = channel.unary_unary(
                '/trafficgen.Trafficgen/stopTrafficgen',
                request_serializer=rpc__pb2.StopTrafficgenParams.SerializeToString,
                response_deserializer=rpc__pb2.Success.FromString,
                )


class TrafficgenServicer(object):
    """Missing associated documentation comment in .proto file."""

    def isTrafficgenRunning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isResultAvailable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTrafficgen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTrafficgen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrafficgenServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isTrafficgenRunning': grpc.unary_unary_rpc_method_handler(
                    servicer.isTrafficgenRunning,
                    request_deserializer=rpc__pb2.IsTrafficgenRunningParams.FromString,
                    response_serializer=rpc__pb2.TrafficgenRunning.SerializeToString,
            ),
            'isResultAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.isResultAvailable,
                    request_deserializer=rpc__pb2.IsResultAvailableParams.FromString,
                    response_serializer=rpc__pb2.ResultAvailable.SerializeToString,
            ),
            'getResult': grpc.unary_unary_rpc_method_handler(
                    servicer.getResult,
                    request_deserializer=rpc__pb2.GetResultParams.FromString,
                    response_serializer=rpc__pb2.Result.SerializeToString,
            ),
            'startTrafficgen': grpc.unary_unary_rpc_method_handler(
                    servicer.startTrafficgen,
                    request_deserializer=rpc__pb2.BinarySearchParams.FromString,
                    response_serializer=rpc__pb2.Success.SerializeToString,
            ),
            'stopTrafficgen': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTrafficgen,
                    request_deserializer=rpc__pb2.StopTrafficgenParams.FromString,
                    response_serializer=rpc__pb2.Success.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trafficgen.Trafficgen', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trafficgen(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def isTrafficgenRunning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficgen.Trafficgen/isTrafficgenRunning',
            rpc__pb2.IsTrafficgenRunningParams.SerializeToString,
            rpc__pb2.TrafficgenRunning.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isResultAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficgen.Trafficgen/isResultAvailable',
            rpc__pb2.IsResultAvailableParams.SerializeToString,
            rpc__pb2.ResultAvailable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficgen.Trafficgen/getResult',
            rpc__pb2.GetResultParams.SerializeToString,
            rpc__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTrafficgen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficgen.Trafficgen/startTrafficgen',
            rpc__pb2.BinarySearchParams.SerializeToString,
            rpc__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTrafficgen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficgen.Trafficgen/stopTrafficgen',
            rpc__pb2.StopTrafficgenParams.SerializeToString,
            rpc__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
